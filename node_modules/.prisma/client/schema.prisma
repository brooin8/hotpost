// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  firstName String?
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  products        Product[]
  marketplaceAuth MarketplaceAuth[]
  syncLogs        SyncLog[]
}

model Product {
  id            String        @id @default(uuid())
  userId        String
  title         String
  description   String
  price         Float
  originalPrice Float?
  quantity      Int           @default(1)
  sku           String?
  brand         String?
  condition     String
  tags          String[]
  status        ProductStatus @default(DRAFT)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  user       User              @relation(fields: [userId], references: [id])
  images     ProductImage[]
  variants   ProductVariant[]
  listings   Listing[]
  categories ProductCategory[]

  @@index([userId])
  @@index([status])
}

enum ProductStatus {
  DRAFT
  ACTIVE
  SOLD
  ARCHIVED
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  url       String
  path      String?
  order     Int      @default(0)
  createdAt DateTime @default(now())

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductVariant {
  id        String  @id @default(uuid())
  productId String
  name      String
  value     String
  price     Float?
  quantity  Int     @default(1)
  sku       String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

model ProductCategory {
  id           String      @id @default(uuid())
  productId    String
  marketplace  Marketplace
  categoryId   String
  categoryName String?

  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, marketplace])
  @@index([productId])
}

model MarketplaceAuth {
  id           String      @id @default(uuid())
  userId       String
  marketplace  Marketplace
  accessToken  String      @db.Text
  refreshToken String?     @db.Text
  expiresAt    DateTime?
  shopId       String?
  shopName     String?
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, marketplace])
  @@index([userId])
}

enum Marketplace {
  EBAY
  ETSY
  WHATNOT
  FACEBOOK
  MERCARI
  OFFERUP
  CRAIGSLIST
}

model Listing {
  id             String        @id @default(uuid())
  productId      String
  marketplace    Marketplace
  marketplaceId  String
  marketplaceUrl String?
  status         ListingStatus @default(ACTIVE)
  price          Float
  quantity       Int
  views          Int           @default(0)
  watchers       Int           @default(0)
  isSmartRelist  Boolean       @default(false)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  soldAt         DateTime?
  delistedAt     DateTime?

  product  Product   @relation(fields: [productId], references: [id])
  syncLogs SyncLog[]

  @@unique([marketplace, marketplaceId])
  @@index([productId])
  @@index([marketplace, status])
}

enum ListingStatus {
  DRAFT
  ACTIVE
  SOLD
  DELISTED
  EXPIRED
}

model SyncLog {
  id          String      @id @default(uuid())
  userId      String
  listingId   String?
  action      SyncAction
  marketplace Marketplace
  status      SyncStatus
  message     String?
  costSaved   Float?
  payload     Json?
  createdAt   DateTime    @default(now())

  user    User     @relation(fields: [userId], references: [id])
  listing Listing? @relation(fields: [listingId], references: [id])

  @@index([userId])
  @@index([listingId])
  @@index([marketplace, status])
}

enum SyncAction {
  CREATE
  UPDATE
  DELETE
  RELIST
  SMART_RELIST
  IMPORT
  EXPORT
}

enum SyncStatus {
  PENDING
  SUCCESS
  FAILED
}

model DashboardMetric {
  id             String      @id @default(uuid())
  date           DateTime    @db.Date
  marketplace    Marketplace
  activeListings Int         @default(0)
  totalSales     Int         @default(0)
  totalRevenue   Float       @default(0)
  totalViews     Int         @default(0)
  costSaved      Float       @default(0)
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@unique([date, marketplace])
  @@index([date])
  @@index([marketplace])
}
